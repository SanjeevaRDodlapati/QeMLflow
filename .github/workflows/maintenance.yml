name: Automated Maintenance Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/qemlflow/observability/maintenance.py'
      - 'tests/observability/test_maintenance.py'
      - 'config/maintenance.yml'
      - '.github/workflows/maintenance.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/qemlflow/observability/maintenance.py'
      - 'tests/observability/test_maintenance.py'
      - 'config/maintenance.yml'
      - '.github/workflows/maintenance.yml'
  schedule:
    # Run maintenance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test-maintenance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-core.txt
        pip install pytest pytest-cov
        pip install pyyaml  # For maintenance config
        pip install psutil  # For system health monitoring

    - name: Install security tools for testing
      run: |
        pip install pip-audit safety
      continue-on-error: true  # These are optional for testing

    - name: Lint maintenance module
      run: |
        python -m flake8 src/qemlflow/observability/maintenance.py --max-line-length=100
        python -m mypy src/qemlflow/observability/maintenance.py --ignore-missing-imports

    - name: Test maintenance data models
      run: |
        python -m pytest tests/observability/test_maintenance.py::TestMaintenanceTask -v
        python -m pytest tests/observability/test_maintenance.py::TestMaintenanceResult -v
        python -m pytest tests/observability/test_maintenance.py::TestSystemHealth -v

    - name: Test maintenance executors
      run: |
        python -m pytest tests/observability/test_maintenance.py::TestDependencyUpdateExecutor -v
        python -m pytest tests/observability/test_maintenance.py::TestSecurityPatchExecutor -v
        python -m pytest tests/observability/test_maintenance.py::TestCleanupExecutor -v
        python -m pytest tests/observability/test_maintenance.py::TestHealthBasedScalingExecutor -v

    - name: Test maintenance manager
      run: |
        python -m pytest tests/observability/test_maintenance.py::TestAutomatedMaintenanceManager -v

    - name: Test global functions
      run: |
        python -m pytest tests/observability/test_maintenance.py::TestGlobalFunctions -v

    - name: Run complete maintenance test suite
      run: |
        python -m pytest tests/observability/test_maintenance.py -v --cov=src/qemlflow/observability/maintenance --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: maintenance
        name: maintenance-coverage
        fail_ci_if_error: false

    - name: Test maintenance configuration
      run: |
        python -c "
        import yaml
        from pathlib import Path
        
        config_path = Path('config/maintenance.yml')
        assert config_path.exists(), 'Maintenance config file missing'
        
        with open(config_path) as f:
            config = yaml.safe_load(f)
        
        # Validate required config sections
        assert 'enabled' in config
        assert 'task_defaults' in config
        assert 'default_executors' in config
        
        print('✓ Maintenance configuration is valid')
        "

    - name: Test maintenance system integration
      run: |
        python -c "
        import tempfile
        from pathlib import Path
        from src.qemlflow.observability.maintenance import (
            initialize_maintenance, get_maintenance_manager, 
            MaintenanceTask, shutdown_maintenance
        )
        
        # Test basic integration
        with tempfile.TemporaryDirectory() as temp_dir:
            manager = initialize_maintenance(storage_dir=temp_dir)
            
            # Add a test task
            task = MaintenanceTask('integration_test', 'cleanup')
            success = manager.add_task(task)
            assert success, 'Failed to add task'
            
            # Get status
            status = manager.get_task_status()
            assert status['total_tasks'] == 1, f'Expected 1 task, got {status[\"total_tasks\"]}'
            
            print('✓ Maintenance system integration test passed')
            
            shutdown_maintenance()
        "

  test-maintenance-real-scenarios:
    runs-on: ubuntu-latest
    needs: test-maintenance

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyyaml psutil

    - name: Test dependency update scenario
      run: |
        python -c "
        import tempfile
        from pathlib import Path
        from src.qemlflow.observability.maintenance import (
            DependencyUpdateExecutor, MaintenanceTask
        )
        
        with tempfile.TemporaryDirectory() as temp_dir:
            # Create mock requirements.txt
            req_file = Path(temp_dir) / 'requirements.txt'
            req_file.write_text('requests==2.25.1\nnumpy==1.20.0\n')
            
            executor = DependencyUpdateExecutor(temp_dir)
            task = MaintenanceTask('test_dep_update', 'dependency_update')
            
            # Execute (will likely skip due to no updates available)
            result = executor.execute(task)
            
            assert result.status in ['success', 'skipped', 'failure']
            print(f'✓ Dependency update test: {result.status} - {result.message}')
        "

    - name: Test cleanup scenario
      run: |
        python -c "
        import tempfile
        from pathlib import Path
        from src.qemlflow.observability.maintenance import (
            CleanupExecutor, MaintenanceTask
        )
        
        with tempfile.TemporaryDirectory() as temp_dir:
            # Create files to clean
            pycache = Path(temp_dir) / '__pycache__'
            pycache.mkdir()
            (pycache / 'test.pyc').touch()
            (Path(temp_dir) / 'test.pyc').touch()
            
            executor = CleanupExecutor(temp_dir)
            task = MaintenanceTask('test_cleanup', 'cleanup')
            
            result = executor.execute(task)
            
            assert result.status == 'success'
            assert result.details['files_removed'] >= 0
            print(f'✓ Cleanup test: {result.message}')
        "

    - name: Test health-based scaling scenario
      run: |
        python -c "
        from src.qemlflow.observability.maintenance import (
            HealthBasedScalingExecutor, MaintenanceTask
        )
        
        executor = HealthBasedScalingExecutor()
        task = MaintenanceTask('test_scaling', 'scaling')
        task.metadata = {
            'cpu_scale_threshold': 75.0,
            'memory_scale_threshold': 80.0,
            'connection_scale_threshold': 1000
        }
        
        result = executor.execute(task)
        
        assert result.status == 'success'
        assert 'system_health' in result.details
        print(f'✓ Health-based scaling test: {result.message}')
        "

  validate-maintenance-docs:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Validate maintenance documentation
      run: |
        # Check that maintenance module is properly documented
        python -c "
        from src.qemlflow.observability.maintenance import (
            MaintenanceTask, MaintenanceResult, SystemHealth,
            DependencyUpdateExecutor, SecurityPatchExecutor,
            CleanupExecutor, HealthBasedScalingExecutor,
            AutomatedMaintenanceManager
        )
        
        # Check docstrings exist
        classes_to_check = [
            MaintenanceTask, MaintenanceResult, SystemHealth,
            DependencyUpdateExecutor, SecurityPatchExecutor,
            CleanupExecutor, HealthBasedScalingExecutor,
            AutomatedMaintenanceManager
        ]
        
        for cls in classes_to_check:
            assert cls.__doc__, f'{cls.__name__} missing docstring'
        
        print('✓ All maintenance classes have documentation')
        "

    - name: Check maintenance configuration schema
      run: |
        python -c "
        import yaml
        from pathlib import Path
        
        config_path = Path('config/maintenance.yml')
        with open(config_path) as f:
            config = yaml.safe_load(f)
        
        # Validate configuration structure
        required_sections = [
            'enabled', 'check_interval_seconds', 'max_concurrent_tasks',
            'retention_days', 'default_executors', 'task_defaults'
        ]
        
        for section in required_sections:
            assert section in config, f'Missing config section: {section}'
        
        # Validate task defaults
        required_task_types = ['dependency_update', 'security_patch', 'cleanup', 'scaling']
        for task_type in required_task_types:
            assert task_type in config['task_defaults'], f'Missing task config: {task_type}'
        
        print('✓ Maintenance configuration schema is valid')
        "
