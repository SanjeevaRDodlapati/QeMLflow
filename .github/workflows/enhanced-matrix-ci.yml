name: Enhanced Matrix CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 3 AM UTC for comprehensive testing
    - cron: '0 3 * * *'

env:
  PYTHONFAULTHANDLER: 1
  PYTHONUNBUFFERED: 1
  PYTHONHASHSEED: random
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  # Pre-flight validation
  pre-flight:
    runs-on: ubuntu-latest
    name: Pre-flight Validation
    outputs:
      should-run-full-matrix: ${{ steps.check.outputs.run-matrix }}
      dependency-hash: ${{ steps.deps.outputs.hash }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if full matrix should run
      id: check
      run: |
        # Run full matrix on main branch, scheduled runs, or if core files changed
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] || \
           [[ "${{ github.event_name }}" == "schedule" ]] || \
           git diff --name-only HEAD~1 | grep -E "(pyproject.toml|requirements.*\.txt|setup.py|\.github/workflows/)" > /dev/null; then
          echo "run-matrix=true" >> $GITHUB_OUTPUT
        else
          echo "run-matrix=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate dependency hash
      id: deps
      run: |
        echo "hash=$(cat pyproject.toml requirements*.txt | sha256sum | cut -d' ' -f1)" >> $GITHUB_OUTPUT

  # Enhanced matrix testing with dependency variations
  enhanced-matrix-test:
    runs-on: ${{ matrix.os }}
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-full-matrix == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        dependency-set: [minimal, standard, full]
        include:
          # Add specific combinations for edge case testing
          - os: ubuntu-latest
            python-version: '3.9'
            dependency-set: minimal
            extra-flags: '--strict-config'
          - os: macos-latest  
            python-version: '3.12'
            dependency-set: full
            extra-flags: '--enable-experimental'
        exclude:
          # Exclude problematic combinations
          - os: windows-latest
            python-version: '3.9'
            dependency-set: minimal
          # Skip full dependency set on Windows for now
          - os: windows-latest
            dependency-set: full

    name: Test ${{ matrix.os }} | Python ${{ matrix.python-version }} | ${{ matrix.dependency-set }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/.cache/pipenv
          ${{ runner.os == 'Windows' && '~\AppData\Local\pip\Cache' || '~/.cache/pip' }}
        key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.dependency-set }}-${{ needs.pre-flight.outputs.dependency-hash }}
        restore-keys: |
          ${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.dependency-set }}-
          ${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies - ${{ matrix.dependency-set }}
      shell: bash
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
        case "${{ matrix.dependency-set }}" in
          "minimal")
            echo "Installing minimal dependencies..."
            pip install -r requirements-minimal.txt || pip install numpy pandas scikit-learn pytest
            pip install -e . --no-deps || echo "Package install failed, continuing with available deps"
            ;;
          "standard") 
            echo "Installing standard dependencies..."
            pip install -r requirements-core.txt || pip install -r requirements.txt
            pip install -e .
            ;;
          "full")
            echo "Installing full dependencies with dev tools..."
            pip install -r requirements.txt
            pip install -e ".[dev]" || pip install -e .
            # Additional development tools
            pip install mypy black isort bandit safety || echo "Some dev tools failed to install"
            ;;
        esac

    - name: Verify installation
      run: |
        python -c "import sys; print(f'Python {sys.version}')"
        python -c "try: import qemlflow; print('✅ QeMLflow imported successfully'); except: print('❌ QeMLflow import failed')"
        pip list

    - name: Run tests with retry mechanism
      shell: bash
      run: |
        max_attempts=3
        attempt=1
        
        while [ $attempt -le $max_attempts ]; do
          echo "🔄 Test attempt $attempt/$max_attempts"
          
          if python -m pytest tests/ -v \
            --tb=short \
            --strict-markers \
            --disable-warnings \
            --cov=src/qemlflow \
            --cov-report=xml \
            --cov-report=term-missing \
            ${{ matrix.extra-flags || '' }}; then
            echo "✅ Tests passed on attempt $attempt"
            break
          else
            echo "❌ Tests failed on attempt $attempt"
            if [ $attempt -eq $max_attempts ]; then
              echo "💥 All test attempts failed"
              exit 1
            fi
            echo "⏳ Waiting 30 seconds before retry..."
            sleep 30
            attempt=$((attempt + 1))
          fi
        done

    - name: Upload coverage reports
      if: matrix.dependency-set == 'full' && matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run performance benchmarks
      if: matrix.dependency-set == 'full' && matrix.os == 'ubuntu-latest'
      continue-on-error: true
      run: |
        if [ -f "tests/benchmarks/test_performance.py" ]; then
          python -m pytest tests/benchmarks/ -v --benchmark-only || echo "Benchmarks failed or not available"
        fi

  # Fast feedback for PR validation
  quick-validation:
    runs-on: ubuntu-latest
    needs: pre-flight
    if: needs.pre-flight.outputs.should-run-full-matrix == 'false'
    
    name: Quick Validation (PR)
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Quick install and test
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-core.txt
        pip install -e .
        python -m pytest tests/ -x --tb=short --disable-warnings
    
    - name: Quick linting
      run: |
        pip install flake8 || echo "Flake8 install failed"
        flake8 src/ tests/ || echo "Linting completed with warnings"

  # Self-healing validation
  self-healing-validation:
    runs-on: ubuntu-latest
    needs: [enhanced-matrix-test, quick-validation]
    if: always()
    
    name: Self-Healing Validation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Analyze test results and trigger recovery
      run: |
        echo "🔍 Analyzing test results..."
        
        # Check if any critical jobs failed
        if [[ "${{ needs.enhanced-matrix-test.result }}" == "failure" ]] || \
           [[ "${{ needs.quick-validation.result }}" == "failure" ]]; then
          echo "⚠️  Critical failures detected"
          
          # Trigger emergency fallback workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/dispatches" \
            -d '{"event_type":"emergency_fallback","client_payload":{"trigger":"enhanced_matrix_failure","ref":"${{ github.ref }}"}}'
          
          echo "🚨 Emergency fallback triggered"
        else
          echo "✅ All tests passed or are acceptable"
        fi

  # Status reporting
  status-report:
    runs-on: ubuntu-latest
    needs: [pre-flight, enhanced-matrix-test, quick-validation, self-healing-validation]
    if: always()
    
    name: Status Report
    
    steps:
    - name: Generate status report
      run: |
        echo "## 📊 Enhanced Matrix CI/CD Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-flight**: ${{ needs.pre-flight.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Enhanced Matrix Test**: ${{ needs.enhanced-matrix-test.result }}" >> $GITHUB_STEP_SUMMARY  
        echo "- **Quick Validation**: ${{ needs.quick-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Self-Healing**: ${{ needs.self-healing-validation.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Matrix Configuration:**" >> $GITHUB_STEP_SUMMARY
        echo "- OS: Ubuntu, macOS, Windows" >> $GITHUB_STEP_SUMMARY
        echo "- Python: 3.9, 3.10, 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
        echo "- Dependencies: minimal, standard, full" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "*Enhanced CI/CD Pipeline v2.1 - Enterprise Grade*" >> $GITHUB_STEP_SUMMARY
